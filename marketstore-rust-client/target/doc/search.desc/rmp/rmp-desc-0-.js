searchState.loadedDescShard("rmp", 0, "The Rust MessagePack Library\nVersion of the MessagePack spec.\nFormat markers.\nProvides various functions and structs for MessagePack …\nProvides various functions and structs for MessagePack …\nReturns the argument unchanged.\nConstruct a msgpack marker from a single byte.\nCalls <code>U::from(self)</code>.\nConverts a marker object into a single-byte representation.\nThe given buffer is not large enough to accumulate the …\nAn alias to the “default” error handling type.\nExtension type meta information.\nFailed to read the data.\nFailed to read the data.\nFailed to read the marker.\nFailed to read the marker.\nAn error that can occur when attempting to read a …\nAn error which can occur when attempting to read a …\nOut of range integral type conversion attempted.\nA type that <code>rmp</code> supports reading from.\nThe error type for I/O operations on <code>RmpRead</code> and …\nThe type decoded isn’t match with the expected one.\nThe type decoded isn’t match with the expected one.\nAn error which can occur when attempting to read a …\nImplementation of the Bytes type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempts to read up to 5 bytes from the given reader and …\nAttempts to read up to 5 bytes from the given reader and …\nAttempts to read a single byte from the given reader and …\nRead the exact number of bytes needed to fill the …\nAttempts to read exactly 5 bytes from the given reader and …\nAttempts to read exactly 9 bytes from the given reader and …\nAttempts to read exactly 3 bytes from the given reader and …\nAttempts to read exactly 18 bytes from the given reader …\nAttempts to read exactly 4 bytes from the given reader and …\nAttempts to read exactly 6 bytes from the given reader and …\nAttempts to read exactly 10 bytes from the given reader …\nAttempts to read exactly 3 bytes from the given reader and …\nAttempts to read exactly 5 bytes from the given reader and …\nAttempts to read exactly 9 bytes from the given reader and …\nAttempts to read exactly 2 bytes from the given reader and …\nAttempts to read up to 9 bytes from the given reader and …\nAttempts to read up to 5 bytes from the given reader and …\nAttempts to read a single byte from the given reader and …\nAttempts to read a single byte from the given reader and …\nAttempts to read a single byte from the given reader and …\nAttempts to read a single byte from the given reader and …\nAttempts to read a string data from the given reader and …\nAttempts to read and decode a string value from the …\nAttempts to read up to 9 bytes from the given reader and …\nAttempts to read and decode a string value from the …\nAttempts to read exactly 3 bytes from the given reader and …\nAttempts to read exactly 5 bytes from the given reader and …\nAttempts to read exactly 9 bytes from the given reader and …\nAttempts to read exactly 2 bytes from the given reader and …\nRead a single (unsigned) byte from this stream\nByte array size.\nType information.\nA wrapper around <code>&amp;[u8]</code> to read more efficiently.\nIndicates that an error occurred reading from Bytes\nIndicates that there were not enough bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrap an existing bytes slice.\nReturn the position of the input buffer.\nGet a reference to the remaining bytes in the buffer.\nAn alias to the “default” error handling type.\nI/O error while writing data.\nI/O error while writing marker.\nA type that <code>rmp</code> supports writing into.\nThe error type for operations on the <code>RmpWrite</code> trait.\nAn error that can occur when attempting to write …\nImplementation of the <code>ByteBuf</code> type\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEncodes and attempts to write the most efficient array …\nEncodes and attempts to write the most efficient binary …\nEncodes and attempts to write the most efficient binary …\nEncodes and attempts to write a bool value into the given …\nWrite a slice of bytes to the underlying stream\nEncodes and attempts to write the most efficient ext …\nEncodes and attempts to write an <code>f32</code> value as a 5-byte …\nEncodes and attempts to write an <code>f64</code> value as a 9-byte …\nEncodes and attempts to write an <code>i16</code> value as a 3-byte …\nEncodes and attempts to write an <code>i32</code> value as a 5-byte …\nEncodes and attempts to write an <code>i64</code> value as a 9-byte …\nEncodes and attempts to write an <code>i8</code> value as a 2-byte …\nEncodes and attempts to write the most efficient map …\nEncodes and attempts to write a negative small integer …\nEncodes and attempts to write a nil value into the given …\nEncodes and attempts to write an unsigned small integer …\nEncodes and attempts to write an <code>i64</code> value into the given …\nEncodes and attempts to write the most efficient string …\nEncodes and attempts to write the most efficient string …\nEncodes and attempts to write an <code>u16</code> value strictly as a …\nEncodes and attempts to write an <code>u32</code> value strictly as a …\nEncodes and attempts to write an <code>u64</code> value strictly as a …\nEncodes and attempts to write an <code>u8</code> value as a 2-byte …\nWrite a single byte to this stream\nEncodes and attempts to write an <code>u64</code> value into the given …\nEncodes and attempts to write an <code>u8</code> value into the given …\nA wrapper around <code>Vec&lt;u8&gt;</code> to serialize more efficiently.\nGet a mutable reference to this type as a Vec\nGet a reference to this type as a slice of bytes (<code>&amp;[u8]</code>)\nGet a reference to this type as a Vec\nReturns the argument unchanged.\nWrap the specified vector as a <code>ByteBuf</code>\nCalls <code>U::from(self)</code>.\nUnwrap the underlying buffer of this vector\nConstruct a new empty buffer\nConstruct a new buffer with the specified capacity")