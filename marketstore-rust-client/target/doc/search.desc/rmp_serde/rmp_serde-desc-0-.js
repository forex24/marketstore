searchState.loadedDescShard("rmp_serde", 0, "MessagePack + Serde\nHack used to serialize MessagePack Extension types.\nChange MessagePack behavior with configuration wrappers.\nGeneric MessagePack deserialization.\nSerialize a Rust data structure into MessagePack data.\nConfig wrapper that overrides <code>Serializer::is_human_readable</code>…\nWhen to encode <code>[u8]</code> as <code>bytes</code> rather than a sequence of …\nThe default serializer/deserializer configuration.\nUse bytes for everything that looks like a container of <code>u8</code>.\nUse bytes for slices, <code>Vec</code>, and a few other types that use …\nConfig wrapper that overrides <code>Serializer::is_human_readable</code>…\nUse bytes only when Serde requires it (typically only when …\nRepresents configuration that dicatates what the …\nConfig wrapper, that overrides struct serialization by …\nConfig wrapper that overrides struct serlization by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>StructMapConfig</code> inheriting unchanged …\nCreates a <code>StructTupleConfig</code> inheriting unchanged …\nCreates a <code>HumanReadableConfig</code> inheriting unchanged …\nCreates a <code>BinaryConfig</code> inheriting unchanged configuration …\nThe reference is pointed at data that was borrowed.\nThe reference is pointed at data that was copied.\nThe depth limit was exceeded.\nA Deserializer that reads bytes from a buffer.\nEnum representing errors that can occur while decoding …\nThe enclosed I/O error occurred while trying to read the …\nThe enclosed I/O error occurred while trying to read a …\nA decoded array did not have the enclosed expected length.\nA numeric cast failed due to an out-of-range error.\nOwned reader wrapper.\nBorrowed reader wrapper.\nExtends the <code>Read</code> trait by allowing to read slices directly …\nUnification of both borrowed and non-borrowed reference …\nA general error occurred while deserializing the expected …\nA mismatch occurred between the decoded and expected value …\nAn otherwise uncategorized error occurred. See the …\nAn encoded string could not be parsed as UTF-8.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize an instance of type <code>T</code> from an I/O stream of …\nConstructs a new <code>Deserializer</code> from the given byte slice.\nDeserialize a temporary scope-bound instance of type <code>T</code> …\nGets a mutable reference to the underlying reader in this …\nGets a reference to the underlying reader in this decoder.\nGets a reference to the underlying reader in this decoder.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this deserializer returning the underlying reader.\nConstructs a new <code>Deserializer</code> by consuming the given …\nReturns the current position of this deserializer, i.e. …\nReads the exact number of bytes from the underlying …\nReturns the part that hasn’t been consumed yet\nChanges the maximum nesting depth that is allowed\nConsumes this deserializer and returns a new one, which …\nConsumes this deserializer and returns a new one, which …\nDepth limit exceeded\nThis type represents all possible errors that can occur …\nRepresents MessagePack serialization implementation for …\nInvalid Data model, i.e. Serialize trait is not implmented …\nFailed to write a MessagePack value.\nRepresents MessagePack serialization implementation.\nCatchall for syntax error messages.\nObtain the underlying writer.\nFailed to serialize struct, sequence or map, because its …\nUnderlying writer type.\nRaised when there is general error when deserializing a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying writer.\nGets a mutable reference to the underlying writer.\nGets a reference to the underlying writer.\nGets a reference to the underlying writer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps this <code>Serializer</code>, returning the underlying writer.\nUnwraps this <code>Serializer</code>, returning the underlying writer.\nConstructs a new <code>MessagePack</code> serializer whose output will …\nSerialize the given data structure as a MessagePack byte …\nSerializes data structure into byte vector as a map …\nConsumes this serializer returning the new one, which will …\nPrefer encoding sequences of <code>u8</code> as bytes, rather than as a …\nConsumes this serializer returning the new one, which will …\nConsumes this serializer returning the new one, which will …\nConsumes this serializer returning the new one, which will …\nSerialize the given data structure as MessagePack into the …\nSerialize the given data structure as MessagePack into the …")